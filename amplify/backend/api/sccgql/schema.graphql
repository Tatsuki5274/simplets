type Company #会社
@model(
  queries: {
    get: "getCompany"
    list: "listCompanys"
  }
  subscriptions: null
  )
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # 社員の閲覧権限
    {allow: groups, groupsField: "id", operations:[read]}

    {allow: private, provider: iam ,operations:[read]}
  ]
)
{
  id: ID! # SCCなどの文字列を格納する

  name: String! # 会社名
  startMonth: Int!  # 会社年度開始月
  shortName: String # 会社の省略表記
  url: AWSURL # ホームページリンク
  isContractEvaluation: Boolean # 業績評価機能の契約状況
  isContractReport: Boolean # 作業報告機能の契約状況
  
}

enum EmployeeType {
  OTHER #不明・その他
  NORMAL  #通常社員
  MANAGER #マネージャー
  SUPER_MANAGER #特権マネージャー
}

enum BooleanType {
  TRUE
  FALSE
}

# ユーザーはcognitoで管理しています。
# このEmployeeは名簿として機能します。認証とは関係がありません。
type Employee #社員
@key(fields: ["username"])
@key(fields: ["companyID", "no"], name: "EmployeeByCompany", queryField: "listEmployeesCompany")
@key(fields: ["companyID", "manager", "isDeleted"], name: "EmployeeByCompanyManager", queryField: "listEmployeesManager") # 非推奨
@auth(
  rules:[
    {allow: groups, groups: ["Admin"]}

    # 社員本人の持つ権限
    #{allow: owner, ownerField: "username", operations: [read]}

    # 社員の閲覧権限
    {allow: groups, groupsField: "companyID", operations:[read]}

    { allow: private, provider: iam, operations: [create, read, update, delete] }
  ]
)
@model(
  queries: {
    get: "getEmployee"
    list: "listEmployees"
  }
  subscriptions: null
)
{
  username: String! #cognitoのusername

  companyID: ID!  # 所属会社ID

  no: String! # 社員番号
  groupID: ID!  # 所属部署ID
  superiorUsername: String! # 上司ユーザー名

  firstName: String!  # 名
  lastName: String! # 姓
  grade: String! #等級
  email: String!  # メールアドレス
  sub: String #cognitoのsubフィールド

  superior: Employee @connection(fields: ["superiorUsername"])  #上司(所属長や部門長)
  group: Group @connection(fields: ["groupID"])  #所属部門
  company: Company @connection (fields: ["companyID"])

  manager: EmployeeType!  #マネージャー
  isCompanyAdmin: Boolean # 社内管理者フラグ
  isDeleted: BooleanType! # 退職フラグ（未使用）
}

type Group #部門
@model(
  queries: {
    get: "getGroup"
    list: "listGroups"
  }
  subscriptions: null
)
@key(fields: ["companyID", "no"], name: "GroupByCompany", queryField: "listGroupsCompany")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # 社員の閲覧権限
    {allow: groups, groupsField: "companyID", operations:[read]}

    { allow: private, provider: iam, operations: [create, read, update, delete] }
  ]
)
{
  id: ID! # 部署ID

  companyID: ID!  # 所属会社ID
  no: String!  #部署番号
  
  # company: Company @connection  グループフィールドに置き換え
  name: String! #部門名

  createdAt: AWSDateTime!
}

type Category
@model(
  queries: {
    get: "getCategory"
    list: "listCategorys"
  }
  subscriptions: null
)
@key(fields: ["companyID", "no"], name: "CategoryByCompany", queryField: "listCategorysCompany")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # 社員の閲覧権限
    {allow: groups, groupsField: "companyID", operations:[read]}

    {allow: private, provider: iam ,operations:[create, read, update, delete]}

  ]
)
{
  id: ID! # カテゴリID
  companyID: ID!  # 所属会社ID

  no: String!  #カテゴリ番号
  name: String! #カテゴリ名
}


type Sheet
@model(
  queries: {
    get: "getSheet"
    list: "listSheets"
  }
  subscriptions: null
)
@key(fields: ["sub", "year"], name: "SheetBySub", queryField: "listSheetsReviewee")
@key(fields: ["companyID"], name: "SheetByCompany", queryField: "listSheetsCompany")
# @key(fields: ["companyID", "year"], name: "sheet_year", queryField: "listSheetYear")
# @key(fields: ["companyID", "sheetGroupLocalId"], name: "sheet_group", queryField: "listSheetGroup")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "topReviewers", operations: [update, read]}  # 部門長による権限
    {allow: owner, ownerField: "secondReviewers", operations: [update, read]} # 所属長による権限
    {allow: owner, ownerField: "reviewee", operations: [create, update, read]}  # 被評価者による権限
    {allow: owner, ownerField: "referencer", operations: [read]}  # 参照者(マネージャー)による権限

    { allow: private, provider: iam, operations: [create, read, update, delete] }
    
  ]
)
{
  id: ID! # シートID

  sub: String!  # 所有社員のsub

  year: Int!  #実施年度
  companyID: ID!  # 所属会社ID
  groupID: ID! #部署ID
  grade: String! #等級
  careerPlan: String  #キャリア計画本人希望
  careerPlanComment: String #話し合い結果コメント
  reviewComment: String #年間評価コメント
  reviewDate: AWSDate #年間評価実施日時
  selfCheckDate: AWSDate #本人確認（日付）
  firstComment: String #部門長コメント
  firstCheckDate: AWSDate #部門長確認（日付）
  secondComment: String #所属長コメント
  secondCheckDate: AWSDate #所属長確認日付
  overAllEvaluation: Int  #総合評価
  statusValue: Int  #承認ステータス値

  # インタビュー情報
  interviewPlanDate: AWSDate    # 目標設定
  interviewPlanComment: String
  InterviewMid1Date: AWSDate    # 中間1
  InterviewMid1Comment: String
  InterviewMid2Date: AWSDate    # 中間2
  InterviewMid2Comment: String
  InterviewMid3Date: AWSDate    # 中間3
  InterviewMid3Comment: String

  revieweeUsername: String  # 被評価者ユーザー名
  secondUsername: String  # 所属長ユーザー名
  topUsername: String # 部門長ユーザー名

  # connection
  sheetGroupName: String  # 部署名

  revieweeEmployee: Employee @connection(fields: ["revieweeUsername"])  #被評価者
  secondEmployee: Employee @connection(fields: ["secondUsername"])  #所属長
  topEmployee: Employee @connection(fields: ["topUsername"])  #所属長の所属長（部門長）
  group: Group @connection(fields: ["groupID"]) # 部署ソート用番号を取得するために参照 (非推奨)
  section: [Section] @connection(fields: ["id"], keyName: "SectionBySheet")

  # オーナーフィールド
  referencer: [String!] #参照者
  reviewee: String! #被評価者
  topReviewers: [String!] #部門長権限
  secondReviewers: [String!] #所属長権限
}

type Section
@model(
  queries: {
    get: "getSection"
    list: "listSections"
  }
  subscriptions: null
)
@key(fields: ["sheetID"], name: "SectionBySheet")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "topReviewers", operations: [read]}
    {allow: owner, ownerField: "secondReviewers", operations: [read]}
    {allow: owner, ownerField: "reviewee", operations: [create, update, read, delete]}
    {allow: owner, ownerField: "referencer", operations: [read]}

    { allow: private, provider: iam, operations: [create, read, update, delete] }
  ]
)
{
  id: ID! # カテゴリセクションID
  sheetID: ID!  # 評価シートID
  no: String! # カテゴリID

  sectionCategoryName: String # カテゴリ名

  objective: [Objective] @connection(fields: ["id"], keyName: "ObjectiveBySection") # カテゴリ所属目標の参照

  # オーナーフィールド
  reviewee: String #被評価者
  topReviewers: [String!] #部門長権限
  secondReviewers: [String!] #所属長権限
  referencer: [String!] #参照者
}

type Objective
@model(
  queries: {
    get: "getObjective"
    list: "listObjectives"
  }
  subscriptions: null
)
@key(fields: ["sectionID"], name: "ObjectiveBySection")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "topReviewers", operations: [update, read]}
    {allow: owner, ownerField: "secondReviewers", operations: [update, read]}
    {allow: owner, ownerField: "reviewee", operations: [create, update, read, delete]}
    {allow: owner, ownerField: "referencer", operations: [read]}

    { allow: private, provider: iam, operations: [create, read, update, delete] }
  ]
)
{
  id: ID! # 目標ID
  sectionID: ID!  # 所属カテゴリセクションID

  createdAt: AWSDateTime!
  
  companyID: String!  # 所属会社ID

  content: String! #目標本文
  result: String  #実績
  priority: String #優先順位
  selfEvaluation: Int #自己評価
  firstEvaluation: Int #所属長評価
  lastEvaluation: Int #最終評価

  progress: Int #進捗率(%)

  #expected date
  expStartDate: AWSDate  #開始予定日
  expDoneDate: AWSDate  #完了予定日
  
  # オーナーフィールド
  reviewee: String #被評価者
  topReviewers: [String!] #部門長権限
  secondReviewers: [String!] #所属長権限
  referencer: [String!] #参照者

}

# 作業報告状態定義
enum ReportWorkingStatus {
  OK        # 問題なし
  InTask    # 問題はあるが、作業はできている
  InProblem # 問題がある
}

# 報告者のフィールド定義
type RevieweeReportComment
{
  work: String    #作業内容
  other: String   #その他コメント
  status: String  #作業状況コメント
}

# 所属長のフィールド定義
type ReviewerReportComment
{
  superior: String #所属長コメント
}


type Superior
{
  # lastname, firstname 名前が必要？
  username: String
  email: String
  # superior: Superior  # 階層が必要？
}

type Report
@model(
  queries: {
    get: "getReport",
    list: "listReports"
  }
  subscriptions: null
)
@key(fields: ["sub", "date"], name: "ReportBySub", queryField: "listReportsSub")
@key(fields: ["companyID", "date"], name: "ReportByCompany", queryField: "listReportsCompanyDate")
# @key(fields: ["groupID"], name: "ReportByGroup", queryField: "listReportsGroup") #仕様追加見送り
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "reviewee", operations: [create, update, read, delete]}
    {allow: owner, ownerField: "referencer", operations: [read]}
    {allow: owner, ownerField: "reviewer", operations: [read, update]}

    {allow: private, provider: iam, operations: [create, read, update, delete] }
  ]
)
{
  id: ID! # 作業報告ID

  sub: String!  # 報告者のsub
  date: AWSDate!  # 報告対象日

  groupID: ID #部署ID

  reviewee: String  # 報告者
  reviewer: [String]  # 所属長
  companyID: String # 報告者所属会社ID
  referencer: [String] #参照者(マネージャーなど)
  
  revieweeComments: RevieweeReportComment # 報告者用フィールド
  # @auth(rules: [
  #     { allow: owner, ownerField: "reviewee"}
  #     # { allow: owner, ownerField: "reviewee", operations: [create, update, read] }
  #     # { allow: owner, ownerField: "reviewer", operations: [read] }      
  #     # { allow: owner, ownerField: "referencer", operations: [read] }      
  #   ])
    #   # シングルフィールドの検証
    #   revieweeTest: String @auth(rules: [
    #   { allow: owner, ownerField: "reviewee"}
    #   # { allow: owner, ownerField: "reviewee", operations: [create, update, read] }
    #   # { allow: owner, ownerField: "reviewer", operations: [read] }      
    #   # { allow: owner, ownerField: "referencer", operations: [read] }      
    # ])
  reviewerComments: ReviewerReportComment # 所属長用フィールド
  # @auth(rules: [
  #     # { allow: owner, ownerField: "reviewer" }
  #     # { allow: owner, ownerField: "reviewer", operations: [update, read] }
  #     { allow: owner, ownerField: "reviewee", operations: [read] }      
  #     # { allow: owner, ownerField: "referencer", operations: [read] }      
  #   ])
  workStatus: ReportWorkingStatus #作業状況
  # revieweeEmail: String #報告者のメールアドレス
  revieweeEmployee: Employee @connection(fields: ["reviewee"])  #被評価者参照
}

# type Query {
#   #listSheetsLtGrade: String @function(name: "listSheetsLtGrade_${env}")
#   # listSheetsLtGrade: [Sheet] @function(name: "listSheetsLtGrade_${env}")
#   #   @auth(rules:[
#   #     {allow: groups, groups: ["Admin", "Manager"]}
#   #     {allow: private, operations: []}
#   #   ])
#   # approvalStatusReferencer(sheetId: String): String @function(name: "approvalStatusReferencer_${env}")
#   #   @auth(rules:[
#   #     {allow: private}
#   #   ])
# }

# メール送信関数の入力定義
input sendEmailInput{
  to: [String]!
  cc: [String]
  bcc: [String]
  subject: String!
  body: String!
}

# 管理者用　組織変更時の権限反映処理のレスポンス形式の定義
type UpdateOwnerResponseType {
  isSuccess: Boolean!
  message: String!
  result: String # JSON String
}

type Mutation{
  # 廃止
  approvalStatusManager(action: String, sheetId: String): String @function(name: "approvalStatusManager_${env}")
    @auth(rules:[
      {allow: private}
    ])
  
  # メールを送信する関数を呼び出す
  sendEmail(input: sendEmailInput): String
    @function(name: "sendEmail-${env}")
    @auth(rules:[
      {allow: private}
    ])

  # 管理者による既存データの所有権更新処理
  updateOwners: UpdateOwnerResponseType
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者によるカテゴリ作成
  createCategoryByCompanyAdmin(input: CreateCategoryInput): Category
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者によるカテゴリ変更
  updateCategoryByCompanyAdmin(input: UpdateCategoryInput): Category
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者によるカテゴリ削除
  deleteCategoryByCompanyAdmin(input: DeleteCategoryInput): Category
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による社員追加
  createEmployeeByCompanyAdmin(input: CreateEmployeeInput): Employee
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による社員更新
  updateEmployeeByCompanyAdmin(input: UpdateEmployeeInput): Employee
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による社員削除
  deleteEmployeeByCompanyAdmin(input: DeleteEmployeeInput): Employee
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による部署追加
  createGroupByCompanyAdmin(input: CreateGroupInput): Group
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による部署更新
  updateGroupByCompanyAdmin(input: UpdateGroupInput): Group
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による部署削除
  deleteGroupByCompanyAdmin(input: DeleteGroupInput): Group
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者によるシート更新
  updateSheetByCompanyAdmin(input: UpdateSheetInput): Sheet
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による削除処理  
  deleteSheetWithChildrenByCompanyAdmin(input: DeleteSheetInput): Sheet
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])

  # 社内管理者による作業報告の更新処理
  updateReportByCompanyAdmin(input: UpdateReportInput): Report
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])
  deleteReportByCompanyAdmin(input: DeleteReportInput): Report
    @function(name: "resolvers-${env}")
    @auth(rules: [
      {allow: private}
    ])
}

# 以下、ビルドスキーマから複製
## カテゴリ
input CreateCategoryInput {
  id: ID
  companyID: ID!
  no: String!
  name: String!
}
input UpdateCategoryInput {
  id: ID!
  companyID: ID
  no: String
  name: String
}
input DeleteCategoryInput {
  id: ID!
}

## 部署
input CreateGroupInput {
  id: ID
  companyID: ID!
  no: String!
  name: String!
  createdAt: AWSDateTime
}

input UpdateGroupInput {
  id: ID!
  companyID: ID
  no: String
  name: String
  createdAt: AWSDateTime
}

input DeleteGroupInput {
  id: ID!
}

## 社員
input CreateEmployeeInput {
  username: String!
  companyID: ID!
  no: String!
  groupID: ID!
  superiorUsername: String!
  firstName: String!
  lastName: String!
  grade: String!
  email: String!
  sub: String
  manager: EmployeeType!
  isCompanyAdmin: Boolean
  isDeleted: BooleanType!
}
input UpdateEmployeeInput {
  username: String!
  companyID: ID
  no: String
  groupID: ID
  superiorUsername: String
  firstName: String
  lastName: String
  grade: String
  email: String
  sub: String
  manager: EmployeeType
  isCompanyAdmin: Boolean
  isDeleted: BooleanType
}
input DeleteEmployeeInput {
  username: String!
}

## 作業報告
input UpdateReportInput {
  id: ID!
  sub: String
  date: AWSDate
  groupID: ID
  reviewee: String
  reviewer: [String]
  companyID: String
  referencer: [String]
  revieweeComments: RevieweeReportCommentInput
  reviewerComments: ReviewerReportCommentInput
  workStatus: ReportWorkingStatus
}
input DeleteReportInput {
  id: ID!
}
input RevieweeReportCommentInput {
  work: String
  other: String
  status: String
}
input ReviewerReportCommentInput {
  superior: String
}

## 評価シート
input UpdateSheetInput {
  id: ID!
  sub: String
  year: Int
  companyID: ID
  groupID: ID
  grade: String
  careerPlan: String
  careerPlanComment: String
  reviewComment: String
  reviewDate: AWSDate
  selfCheckDate: AWSDate
  firstComment: String
  firstCheckDate: AWSDate
  secondComment: String
  secondCheckDate: AWSDate
  overAllEvaluation: Int
  statusValue: Int
  interviewPlanDate: AWSDate
  interviewPlanComment: String
  InterviewMid1Date: AWSDate
  InterviewMid1Comment: String
  InterviewMid2Date: AWSDate
  InterviewMid2Comment: String
  InterviewMid3Date: AWSDate
  InterviewMid3Comment: String
  revieweeUsername: String
  secondUsername: String
  topUsername: String
  sheetGroupName: String
  referencer: [String!]
  reviewee: String
  topReviewers: [String!]
  secondReviewers: [String!]
}

input DeleteSheetInput {
  id: ID!
}
