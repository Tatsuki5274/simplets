type Company #会社
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}  ]
)
{
  id: ID!
  name: String!
  shortName: String
  url: AWSURL
  companyGroupName: String!   #社員全員が保持するグループ名 
  companyManagerGroupName: String!    # 社内マネージャーが保持するグループ名
  companyAdminGroupName: String!      # 社内管理者が保持するグループ名
  
  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

# ユーザーはcognitoで管理しています。
# このEmployeeは名簿として機能します。認証とは関係がありません。
type Employee #社員
@auth(
  rules:[
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}

    # 社員本人の持つ権限
    {allow: owner, operations: [read]}

    { allow: private, provider: iam, operations: [read] }
  ]
)
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
{
  id: ID! #cognito usernameを格納する
  no: String #社員番号
  firstName: String!
  lastName: String!
  grade: Int! #等級
  email: String!
  superior: Employee @connection  #上司(所属長や部門長)
  group: Group @connection  #所属部門

  # companyId: ID!
  company: Company @connection #(fields: ["companyId"])
  
  # オーナーフィールド
  owner: String   #社員本人

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

type Group #部門
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
# @key(name: "listGroupBySort", fields: ["id", "sort"], queryField: "listGroupBySort")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}
  ]
)
{
  id: ID!
  # company: Company @connection  グループフィールドに置き換え
  name: String! #部門名
  sort: Int  #ソート

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

type Category
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}
  ]
)
{
  id: ID!
  # company: Company @connection  # グループフィールドへ置き換え
  no: Int
  name: String! #カテゴリ名

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

type Interview
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@key(name: "bySheet", fields: ["sheetId"])
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}

    # 評価者
    {allow: owner, ownerField: "reviewers", operations: [update, read]}

    # 被評価者
    {allow: owner, ownerField: "reviewee", operations: [create, update, read]}
  ]
)
{
  id: ID!
  sheetId: ID
  interviewDate: AWSDate
  
  purpose: String #インタビュー目的
  detail: String  #インタビュー内容

  # オーナーフィールド
  reviewee: String #インタビューを受けた人
  reviewers: [String] #評価者

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

type Sheet
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}

    # 評価者
    {allow: owner, ownerField: "reviewers", operations: [update, read]}

    # 被評価者
    {allow: owner, ownerField: "reviewee", operations: [create, update, read]}

    { allow: private, provider: iam, operations: [read, update] }
    
  ]
)
{
  id: ID!
  year: Int!  #実施年度
  grade: Int! #等級
  careerPlan: String  #キャリア計画本人希望
  careerPlanComment: String #話し合い結果コメント
  reviewComment: String #年間評価コメント
  reviewDate: AWSDate #年間評価実施日時
  selfCheckDate: AWSDate #本人確認（日付）
  firstComment: String #部門長コメント
  firstCheckDate: AWSDate #部門長確認（日付）
  secondComment: String #所属長コメント
  secondCheckDate: AWSDate #所属長確認日付
  overAllEvaluation: Int  #総合評価
  statusValue: Int  #承認ステータス値

  # connection
  sheetGroupId: ID!
  group: Group @connection(fields: ["sheetGroupId"])
  interviews: [Interview] @connection(keyName: "bySheet", fields: ["id"])
  # company: Company @connection
  revieweeEmployee: Employee @connection  #被評価者
  secondEmployee: Employee @connection  #所属長
  section: [Section] @connection(keyName: "bySection", fields: ["id"])  #カテゴリセクション


  #　オーナーフィールド
  reviewee: String #被評価者
  reviewers: [String] #評価者

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

type Section
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@key(name: "bySection", fields: ["sectionSheetId"])
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}

    # 評価者
    {allow: owner, ownerField: "reviewers", operations: [read]}

    # 被評価者
    {allow: owner, ownerField: "reviewee", operations: [create, read]}
  ]
)
{
  id: ID!
  sectionSheetId: ID!
  objective: [Objective] @connection(keyName: "objectiveBySection", fields: ["id"])
  category: Category @connection

  #　オーナーフィールド
  reviewee: String #被評価者
  reviewers: [String] #評価者

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

type Objective
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@key(name: "objectiveBySection", fields: ["objectiveSectionId"])
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # グループに対する権限
    {allow: groups, groupsField: "readGroups", operations: [read]}
    {allow: groups, groupsField: "updateGroups", operations: [read, update]}

    # 評価者
    {allow: owner, ownerField: "reviewers", operations: [update, read]}

    # 被評価者
    {allow: owner, ownerField: "reviewee", operations: [create, update, read]}
  ]
)
{
  id: ID!
  content: String! #目標本文
  result: String  #実績
  priority: String #優先順位
  selfEvaluation: Int #自己評価
  firstEvaluation: Int #所属長評価
  lastEvaluation: Int #最終評価

  progress: Int #進捗率(%)
  status: String #progressへ置き換えて廃止予定！

  #expected date
  expStartDate: AWSDate  #開始予定日
  expDoneDate: AWSDate  #完了予定日

  sheet: Sheet @connection
  objectiveSectionId: ID!
  section: Section @connection(fields: ["objectiveSectionId"])
  
  #　オーナーフィールド
  reviewee: String #被評価者
  reviewers: [String] #評価者

  # グループフィールド
  readGroups: [String]    #読み込みを許可するグループ
  updateGroups: [String]  #変更を許可するグループ
}

# type Query {
#   #listSheetsLtGrade: String @function(name: "listSheetsLtGrade-${env}")
#   # listSheetsLtGrade: [Sheet] @function(name: "listSheetsLtGrade-${env}")
#   #   @auth(rules:[
#   #     {allow: groups, groups: ["Admin", "Manager"]}
#   #     {allow: private, operations: []}
#   #   ])
#   # approvalStatusReferencer(sheetId: String): String @function(name: "approvalStatusReferencer-${env}")
#   #   @auth(rules:[
#   #     {allow: private}
#   #   ])
# }

input sendEmailInput{
  to: [String]!
  cc: [String]
  bcc: [String]
  subject: String!
  body: String!
}


type Mutation{
  # 廃止
  approvalStatusManager(action: String, sheetId: String): String @function(name: "approvalStatusManager-${env}")
    @auth(rules:[
      {allow: private}
    ])
  
  # メールを送信する関数を呼び出す
  sendEmail(input: sendEmailInput): String
    @function(name: "sendEmail-${env}")
    @auth(rules:[
      {allow: private}
    ])
}