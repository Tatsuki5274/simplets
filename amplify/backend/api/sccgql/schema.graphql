type Company #会社
@model
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: private}
  ]
)
{
  id: ID!

  name: String!
  shortName: String
  url: AWSURL

  
}

enum EmployeeType {
  OTHER #不明・その他
  NORMAL  #通常社員
  MANAGER #マネージャー
  SUPER_MANAGER #特権マネージャー
}

# ユーザーはcognitoで管理しています。
# このEmployeeは名簿として機能します。認証とは関係がありません。
type Employee #社員
@key(fields: ["companyID", "username"])
@key(fields: ["companyID", "localID"], name: "employee-local-id", queryField: "listEmployeeLocalID")
@key(fields: ["companyID", "manager"], name: "employee-manager", queryField: "listEmployeesManager")
# @key(fields: ["companyID", "employeeGroupLocalId", "username"], name: "employee-manager-group", queryField: "listEmployeesManagerGroup")
@auth(
  rules:[
    {allow: groups, groups: ["Admin"]}

    # 社員本人の持つ権限
    {allow: owner, ownerField: "username", operations: [read]}

    { allow: private, provider: iam, operations: [read] }

    {allow: private}
  ]
)
@model
{
  companyID: ID!
  username: ID! #cognito username

  localID: ID! #社員番号などの社内ID・UUID
  employeeGroupLocalId: ID!
  superiorUsername: ID!

  # no: String #社員番号
  firstName: String!
  lastName: String!
  grade: Int! #等級
  email: String!
  superior: Employee @connection(fields: ["companyID", "superiorUsername"])  #上司(所属長や部門長)
  group: Group @connection(fields: ["companyID", "employeeGroupLocalId"])  #所属部門
  company: Company @connection (fields: ["companyID"])

  manager: EmployeeType  #マネージャー
}

type Group #部門
@model
@key(fields: ["companyID", "localID"])
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: private}
  ]
)
{
  companyID: ID!
  localID: ID!  #ソート
  
  # company: Company @connection  グループフィールドに置き換え
  name: String! #部門名

  createdAt: AWSDateTime!
}

type Category
@model
@key(fields: ["companyID", "localID"])
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: private}
  ]
)
{
  companyID: ID!
  localID: ID!  #ソート
  # company: Company @connection  # グループフィールドへ置き換え

  name: String! #カテゴリ名
}


type Sheet
@model
@key(fields: ["companyID", "reviewee", "year"])
@key(fields: ["companyID", "reviewee"], name: "sheet-reviewee", queryField: "listSheetReviewee")
@key(fields: ["companyID", "year"], name: "sheet-year", queryField: "listSheetYear")
@key(fields: ["companyID", "sheetGroupLocalId"], name: "sheet-group", queryField: "listSheetGroup")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "topReviewers", operations: [update, read]}
    {allow: owner, ownerField: "secondReviewers", operations: [update, read]}
    {allow: owner, ownerField: "reviewee", operations: [create, update, read]}
    {allow: owner, ownerField: "referencer", operations: [read]}

    { allow: private, provider: iam, operations: [read, update] }
    
  ]
)
{
  companyID: ID!
  year: Int!  #実施年度
  # sheetSectionKey: String!

  grade: Int! #等級
  careerPlan: String  #キャリア計画本人希望
  careerPlanComment: String #話し合い結果コメント
  reviewComment: String #年間評価コメント
  reviewDate: AWSDate #年間評価実施日時
  selfCheckDate: AWSDate #本人確認（日付）
  firstComment: String #部門長コメント
  firstCheckDate: AWSDate #部門長確認（日付）
  secondComment: String #所属長コメント
  secondCheckDate: AWSDate #所属長確認日付
  overAllEvaluation: Int  #総合評価
  statusValue: Int  #承認ステータス値

  # インタビュー情報
  interviewPlanDate: AWSDate    # 目標設定
  interviewPlanComment: String
  InterviewMid1Date: AWSDate    # 中間1
  InterviewMid1Comment: String
  InterviewMid2Date: AWSDate    # 中間2
  InterviewMid2Comment: String
  InterviewMid3Date: AWSDate    # 中間3
  InterviewMid3Comment: String

  revieweeUsername: ID!
  secondUsername: ID!

  # connection
  sheetGroupLocalId: ID!
  group: Group @connection(fields: ["companyID", "sheetGroupLocalId"])
  revieweeEmployee: Employee @connection(fields: ["companyID", "revieweeUsername"])  #被評価者
  secondEmployee: Employee @connection(fields: ["companyID", "secondUsername"])  #所属長
  section: [Section] @connection(fields: ["companyID"]) # companyID.reviewee.year

  #　オーナーフィールド
  referencer: [String!] #参照者
  reviewee: String! #被評価者
  topReviewers: [String!] #部門長権限
  secondReviewers: [String!] #所属長権限
}

type Section
@model
@key(fields: ["sheetKeys", "sectionCategoryLocalId"])
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "topReviewers", operations: [read]}
    {allow: owner, ownerField: "secondReviewers", operations: [read]}
    {allow: owner, ownerField: "reviewee", operations: [create, update, read, delete]}
    {allow: owner, ownerField: "referencer", operations: [read]}
  ]
)
{
  sheetKeys: ID! # companyID.reviewee.year の形式として保持
  sectionCategoryLocalId: ID!
  # sectionCategoryId: ID!
  companyID: ID!


  objective: [Objective] @connection(fields: ["sheetKeys"]) # sheetKeys.sectionCategoryLocalId
  category: Category @connection(fields: ["companyID", "sectionCategoryLocalId"])

  #　オーナーフィールド
  reviewee: String #被評価者
  topReviewers: [String!] #部門長権限
  secondReviewers: [String!] #所属長権限
  referencer: [String!] #参照者
}

type Objective
@model
@key(fields: ["sectionKeys", "createdAt"])
# @key(fields: ["sectionKeys", "objectiveCategoryDate"], name: "objective-sheet-category")
@auth(
  rules: [
    {allow: groups, groups: ["Admin"]}

    # オーナーフィールド
    {allow: owner, ownerField: "topReviewers", operations: [update, read]}
    {allow: owner, ownerField: "secondReviewers", operations: [update, read]}
    {allow: owner, ownerField: "reviewee", operations: [create, update, read, delete]}
    {allow: owner, ownerField: "referencer", operations: [read]}
  ]
)
{
  sectionKeys: ID!  # sheetKeys.sectionCategoryLocalId の形式で保持
  createdAt: AWSDateTime!
  
  # objectiveCategoryLocalId: ID!
  companyID: ID!

  content: String! #目標本文
  result: String  #実績
  priority: String #優先順位
  selfEvaluation: Int #自己評価
  firstEvaluation: Int #所属長評価
  lastEvaluation: Int #最終評価

  progress: Int #進捗率(%)

  #expected date
  expStartDate: AWSDate  #開始予定日
  expDoneDate: AWSDate  #完了予定日

  # sheet: Sheet @connection
  # objectiveSectionId: ID!
  # section: Section @connection(fields: ["objectiveSectionId"])
  
  #　オーナーフィールド
  reviewee: String #被評価者
  topReviewers: [String!] #部門長権限
  secondReviewers: [String!] #所属長権限
  referencer: [String!] #参照者

}

# type Query {
#   #listSheetsLtGrade: String @function(name: "listSheetsLtGrade-${env}")
#   # listSheetsLtGrade: [Sheet] @function(name: "listSheetsLtGrade-${env}")
#   #   @auth(rules:[
#   #     {allow: groups, groups: ["Admin", "Manager"]}
#   #     {allow: private, operations: []}
#   #   ])
#   # approvalStatusReferencer(sheetId: String): String @function(name: "approvalStatusReferencer-${env}")
#   #   @auth(rules:[
#   #     {allow: private}
#   #   ])
# }

input sendEmailInput{
  to: [String]!
  cc: [String]
  bcc: [String]
  subject: String!
  body: String!
}


type Mutation{
  # 廃止
  approvalStatusManager(action: String, sheetId: String): String @function(name: "approvalStatusManager-${env}")
    @auth(rules:[
      {allow: private}
    ])
  
  # メールを送信する関数を呼び出す
  sendEmail(input: sendEmailInput): String
    @function(name: "sendEmail-${env}")
    @auth(rules:[
      {allow: private}
    ])
}