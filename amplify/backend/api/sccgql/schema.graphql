type ApprovalStatus #承認ステータス
@model
@auth(
  rules: [
    {allow: groups, groups: ["Root"]}
    {allow: private, operations: [read]}
    {allow: private, provider: iam, operations:[read]}
  ]
)
{
  id: ID!
  no: Int #ステータスNo
  name: String! #名称
}

type Company #会社
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@auth(
  rules: [
    {allow: groups, groups: ["Root"]}
    {allow: private}
    {allow: private, provider: iam}
  ]
)
{
  id: ID!
  name: String!
  shortName: String
  url: AWSURL
}

# ユーザーはcognitoで管理しています。
# このEmployeeは名簿として機能します。認証とは関係がありません。
type Employee #社員
@auth(
  rules:[
    {allow: private}
  ]
)
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
{
  id: ID!
  no: String #社員番号
  firstName: String!
  lastName: String!
  grade: Int! #等級
  superior: Employee @connection  #所属長ID

  companyId: ID!
  company: Company @connection(fields: ["companyId"])
}

type Group #部門
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@auth(
  rules: [
    {allow: groups, groups: ["Root"]}
    {allow: private, operations: [read]}
    {allow: private}
  ]
)
{
  id: ID!
  company: Company @connection
  group: Group @connection
  name: String! #部門名
}

type Category
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@auth(
  rules: [
    {allow: groups, groups: ["Root"]}
    {allow: private, operations: [read]}
    {allow: private}
  ]
)
{
  id: ID!
  company: Company @connection
  no: Int
  name: String! #カテゴリ名
}

type Interview
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@key(name: "bySheet", fields: ["sheetId"])
@auth(
  rules: [
    { allow: groups, groups: ["Root"]}
    { allow: owner, ownerField: "reviewee", operations: [read] }
    {allow: private}
  ]
)
{
  id: ID!
  sheetId: ID
  interviewDate: AWSDate
  
  purpose: String #インタビュー目的
  detail: String  #インタビュー内容

  reviewee: String #インタビューを受けた人
}

type Sheet
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
#@key(fields: ["year", "reviewee", "companyId", "grade"])
# @auth(
#   rules: [
#     {allow: owner, ownerField: "reviewee", operations: [read] }
#     {allow: groups, groups: ["Root"]}
#     {allow: private, provider: iam}
#   ]
# )
@auth(
  rules:[
    {allow: private}
  ]
)
{
  id: ID!
  year: Int!  #実施年度
  grade: Int! #等級
  careerPlan: String  #キャリア計画本人希望
  careerPlanComment: String #話し合い結果コメント
  reviewComment: String #年間評価コメント
  reviewDate: AWSDate #年間評価実施日時
  selfCheckDate: AWSDate #本人確認（日付）
  firstComment: String #部門長コメント
  firstCheckDate: AWSDate #部門長確認（日付）
  secondComment: String #所属長コメント
  secondCheckDate: AWSDate #所属長確認日付
  overAllEvaluation: Int  #総合評価

  sheetGroupId: ID!
  group: Group @connection(fields: ["sheetGroupId"])
  interviews: [Interview] @connection(keyName: "bySheet", fields: ["id"])
  company: Company @connection
  revieweeEmployee: Employee @connection  #被評価者
  secondEmployee: Employee @connection  #所属長
  # status: ApprovalStatus @connection    #承認ステータス
  section: [Section] @connection(keyName: "bySection", fields: ["id"])  #カテゴリセクション

  statusValue: Int  #承認ステータス値（読み取り禁止）
    @auth(rules:[
      { allow: groups, groups: ["Root"]}
      {allow: private, provider: iam}
      {allow: private, operations: [read]}
    ])

  status: String  #承認ステータスを返す関数
    #@function(name: "approvalStatusReferencer-${env}")

  reviewee: String #被評価者　オーナーフィールド
}

type Section
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@key(name: "bySection", fields: ["sectionSheetId"])
@auth(
  rules: [
    {allow: private}
  ]
)
{
  id: ID!
  sectionSheetId: ID!
  objective: [Objective] @connection(keyName: "objectiveBySection", fields: ["id"])
  category: Category @connection
}

type Objective
@model(timestamps:{createdAt: "createdAt", updatedAt: "updatedAt"})
@key(name: "objectiveBySection", fields: ["objectiveSectionId"])
@auth(
  rules: [
    {allow: owner, ownerField: "reviewee" }
    {allow: groups, groups: ["Root"]}
    # {allow: groups, groups: ["Manager"], operations: [read]}
    {allow: private}
  ]
)
{
  id: ID!
  content: String! #目標本文
  result: String  #実績
  priority: String #優先順位
  selfEvaluation: Int #自己評価
  firstEvaluation: Int #所属長評価
  lastEvaluation: Int #最終評価

  progress: Int #進捗率(%)
  status: String #progressへ置き換えて廃止予定！

  #expected date
  expStartDate: AWSDate  #開始予定日
  expFinishDate: AWSDate  #終了予定日
  expDoneDate: AWSDate  #完了予定日

  sheet: Sheet @connection
  objectiveSectionId: ID!
  section: Section @connection(fields: ["objectiveSectionId"])
  
  reviewee: String #社員ID(被評価者)
}

# type Query {
#   #listSheetsLtGrade: String @function(name: "listSheetsLtGrade-${env}")
#   # listSheetsLtGrade: [Sheet] @function(name: "listSheetsLtGrade-${env}")
#   #   @auth(rules:[
#   #     {allow: groups, groups: ["Root", "Manager"]}
#   #     {allow: private, operations: []}
#   #   ])
#   # approvalStatusReferencer(sheetId: String): String @function(name: "approvalStatusReferencer-${env}")
#   #   @auth(rules:[
#   #     {allow: private}
#   #   ])
# }


type Mutation{
  approvalStatusManager(action: String, sheetId: String): String @function(name: "approvalStatusManager-${env}")
    @auth(rules:[
      {allow: private}
    ])
}

